version: "3.8"
services:
  proxy:
    image: reallibrephotos/librephotos-proxy:latest
    container_name: proxy
    restart: unless-stopped
    volumes:
      - ${PHOTO_VOLUME}:/data
      - ${LIBREPHOTOS_VOLUME}/protected_media:/protected_media
    ports:
      - ${LIBREPHOTOS_PORT}:80
    depends_on:
      - backend
      - frontend

  db:
    image: postgres:13
    container_name: db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - ${LIBREPHOTOS_VOLUME}/db:/var/lib/postgresql/data
    command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0
    #Checking health of Postgres db
    healthcheck:
      test: psql -U ${DB_USER} -d ${DB_NAME} -c "SELECT 1;"
      interval: 5s
      timeout: 5s
      retries: 5
      
  frontend:
    image: reallibrephotos/librephotos-frontend:latest
    container_name: frontend
    restart: unless-stopped
    depends_on:
      - backend

  backend:
    image: reallibrephotos/librephotos:latest
    container_name: backend
    restart: unless-stopped
    volumes:
      - ${PHOTO_VOLUME}:/data
      - ${LIBREPHOTOS_VOLUME}/protected_media:/protected_media
      - ${LIBREPHOTOS_VOLUME}/logs:/logs
      - ${LIBREPHOTOS_VOLUME}/cache:/root/.cache
    environment:
      # - SECRET_KEY=${SECRET_KEY}
      - BACKEND_HOST=backend
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - DB_BACKEND=postgresql
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_HOST=${DB_HOST}
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DEBUG=0
      # - MAPBOX_API_KEY=${MAPBOX_API_KEY}
      # - WEB_CONCURRENCY=${WEB_CONCURRENCY}
      # - SKIP_PATTERNS=${SKIP_PATTERNS}
      # - ALLOW_UPLOAD=${ALLOW_UPLOAD}
      # - HEAVYWEIGHT_PROCESS=${HEAVYWEIGHT_PROCESS}

    # Wait for Postgres
    depends_on:
      db:
        condition: service_healthy

  redis:
    image: redis:6
    container_name: redis
    restart: unless-stopped
